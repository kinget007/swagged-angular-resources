#!/usr/bin/env node
var _, apiUrlOrFile, argv, beautify, fileOrUrl, fs, getCode, getParameters, getResourceOperations, handlebars, log, mkdirp, mockTemplate, ngDoc, ngMockModuleOutput, ngModule, ngModuleOutput, path, providerTemplate, readFileAsJSON, readUrlAsJSON, registerHelpers, registerPartialFromFile, request, templateBase, url;

fs = require("fs");

request = require("request");

path = require("path");

url = require("url");

_ = require("underscore");

_.str = require("underscore.string");

handlebars = require("handlebars");

argv = require("yargs").argv;

mkdirp = require("mkdirp");

beautify = require("js-beautify").js_beautify;

if (argv._.length === 0) {
  throw "Expected: swagged-angular-resources swagger-docs-url|swagger-docs-file [--ngmodule swaggedAngularResources [--strip-trailing-slashes false [--output index.js [--mock-output false]]]]";
}

fileOrUrl = argv._[0];

ngModule = argv.ngModule || "swaggedAngularResources";

ngModuleOutput = argv.output || "index.js";

ngDoc = !!argv.ngdoc;

ngMockModuleOutput = argv.mock;

log = function() {
  return console.log.apply(this, arguments);
};

registerHelpers = function(fns) {
  var candidateHelpers;
  candidateHelpers = _.filter(_.keys(fns), function(fnName) {
    return _.isFunction(fns[fnName]);
  });
  return _.each(candidateHelpers, function(fnName) {
    return handlebars.registerHelper(fnName, function() {
      var args;
      args = Array.prototype.slice.call(arguments, 0).slice(0, -1);
      return fns[fnName].apply(this, args);
    });
  });
};

registerHelpers(_.str);

handlebars.registerHelper('json', function(context) {
  return JSON.stringify(context, null, 4);
});

registerPartialFromFile = function(name, path) {
  var content;
  content = fs.readFileSync(path, {
    encoding: "utf-8"
  });
  return handlebars.registerPartial(name, content);
};

templateBase = __dirname + "/../templates";

providerTemplate = templateBase + "/provider-module.hbs";

mockTemplate = templateBase + "/mock-module.hbs";

registerPartialFromFile("header", templateBase + "/partials/layout/header.hbs");

registerPartialFromFile("footer", templateBase + "/partials/layout/footer.hbs");

registerPartialFromFile("provider", templateBase + "/partials/provider/provider.hbs");

registerPartialFromFile("providerDoc", templateBase + "/partials/provider/provider-doc.hbs");

registerPartialFromFile("providerActions", templateBase + "/partials/provider/actions.hbs");

registerPartialFromFile("providerActionsDoc", templateBase + "/partials/provider/actions-doc.hbs");

registerPartialFromFile("mockActions", templateBase + "/partials/mock/actions.hbs");

registerPartialFromFile("swaggerConfiguration", templateBase + "/partials/config/configuration.hbs");

registerPartialFromFile("swaggerInformation", templateBase + "/partials/config/information.hbs");

readUrlAsJSON = function(url, cb) {
  return request.get({
    url: url.href,
    json: true
  }, function(error, res, result) {
    return cb(error, result);
  });
};

readFileAsJSON = function(file, cb) {
  return fs.readFile(file, {
    encoding: "utf-8"
  }, function(error, file) {
    return cb(error, JSON.parse(file));
  });
};

getParameters = function(type, parameters) {
  var params;
  params = _.filter(parameters, function(parameter) {
    return parameter["in"] === type;
  });
  if (params.length === 0) {
    return false;
  } else {
    return params;
  }
};

getResourceOperations = function(apiDefinition) {
  var tags;
  if (apiDefinition.tags) {
    tags = _.map(apiDefinition.tags, function(tag) {
      return tag.name;
    });
  } else {
    tags = _.reduce(apiDefinition.paths, function(memo, methods) {
      _.each(methods, function(operation) {
        return memo = memo.concat(operation.tags);
      });
      return memo;
    }, []);
    tags = _.uniq(tags);
  }
  return _.reduce(apiDefinition.paths, function(memo, methods, path) {
    _.each(methods, function(operation, action) {
      var inTags;
      inTags = _.intersection(operation.tags, tags);
      return _.each(inTags, function(tag) {
        var isQuery, mockedResponse, mockedResponseMimeType, modelDefinition, response;
        response = operation.responses["200"];
        if (response && response.schema) {
          if (response.schema.type === "array") {
            modelDefinition = response.schema.items.$ref;
            isQuery = true;
          } else {
            modelDefinition = response.schema.$ref;
          }
        }
        mockedResponseMimeType = "application/json";
        if (response && response.examples && response.examples[mockedResponseMimeType]) {
          mockedResponse = response.examples[mockedResponseMimeType];
        }
        modelDefinition = modelDefinition && modelDefinition.match(/.+\/(.+)$/)[1];
        memo[tag] = memo[tag] || [];
        return memo[tag].push({
          path: path.replace(/\{(.+?)\}/g, ":$1"),
          nickname: operation.operationId || modelDefinition + "_" + _.str.capitalize(action),
          action: action.toUpperCase(),
          summary: operation.summary,
          mockedResponse: mockedResponse,
          pathParameters: getParameters("path", operation.parameters),
          isQuery: isQuery && action === "get",
          isGet: !isQuery && action === "get",
          isDelete: action === "delete",
          isPost: action === "post",
          isPut: action === "put",
          isPatch: action === "patch"
        });
      });
    });
    return memo;
  }, {});
};

getCode = function(error, apiDefinition) {
  var context, resourceOperations;
  if (error) {
    throw error;
  }
  resourceOperations = getResourceOperations(apiDefinition);
  context = {
    swaggerApiUrl: (_.first(apiDefinition.schemes)) + "://" + apiDefinition.host + apiDefinition.basePath,
    swaggerApiInfo: apiDefinition.info,
    ngModule: ngModule,
    ngProviderSuffix: "",
    ngResources: resourceOperations,
    ngDoc: ngDoc
  };
  fs.readFile(providerTemplate, {
    encoding: "utf-8"
  }, function(error, template) {
    var code;
    if (error) {
      throw error;
    } else {
      code = handlebars.compile(template)(context);
      if (!fs.existsSync(ngModuleOutput)) {
        mkdirp.sync(path.dirname(ngModuleOutput));
      }
      return fs.writeFile(ngModuleOutput, beautify(code), {
        encoding: "utf-8"
      }, function(error) {
        if (error) {
          throw error;
        }
      });
    }
  });
  if (ngMockModuleOutput) {
    return fs.readFile(mockTemplate, {
      encoding: "utf-8"
    }, function(error, template) {
      var code;
      if (error) {
        throw error;
      } else {
        code = handlebars.compile(template)(context);
        if (!fs.existsSync(ngMockModuleOutput)) {
          mkdirp.sync(path.dirname(ngMockModuleOutput));
        }
        return fs.writeFile(ngMockModuleOutput, beautify(code), {
          encoding: "utf-8"
        }, function(error) {
          if (error) {
            throw error;
          }
        });
      }
    });
  }
};

apiUrlOrFile = url.parse(fileOrUrl);

if (apiUrlOrFile.protocol !== null) {
  readUrlAsJSON(apiUrlOrFile, getCode);
} else {
  readFileAsJSON(apiUrlOrFile.path, getCode);
}
